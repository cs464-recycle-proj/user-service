name: CD - Deploy to DigitalOcean

on:
  workflow_run:
    workflows: ["User Service CI"]
    types:
      - completed
    branches:
      - main


permissions:
  contents: read
  actions: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  IMAGE_NAME: user-service
  HELM_RELEASE_NAME: user-service
  K8S_NAMESPACE: user

jobs:
  build-and-push:
    name: Build and Push to DigitalOcean Registry
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Build Docker image
        run: docker build -t ${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Tag Docker image
        run: docker tag ${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker image to DigitalOcean Registry
        run: |
          docker push ${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest


  deploy:
    name: Deploy to DigitalOcean Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.K8S_CLUSTER_NAME }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.19.0'

      - name: Add Bitnami Helm repository
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Check for existing Helm operations
        run: |
          echo "Checking for ongoing Helm operations..."
          
          # Check if there's a pending release
          RELEASE_STATUS=$(helm status ${{ env.HELM_RELEASE_NAME }} -n ${{ env.K8S_NAMESPACE }} -o json 2>/dev/null | jq -r '.info.status' || echo "not-found")
          
          echo "Current release status: $RELEASE_STATUS"
          
          if [ "$RELEASE_STATUS" = "pending-install" ] || [ "$RELEASE_STATUS" = "pending-upgrade" ] || [ "$RELEASE_STATUS" = "pending-rollback" ]; then
            echo "‚ö†Ô∏è Another Helm operation is in progress (status: $RELEASE_STATUS)"
            echo "Waiting for it to complete (max 5 minutes)..."
            
            for i in {1..30}; do
              sleep 10
              NEW_STATUS=$(helm status ${{ env.HELM_RELEASE_NAME }} -n ${{ env.K8S_NAMESPACE }} -o json 2>/dev/null | jq -r '.info.status' || echo "not-found")
              echo "Attempt $i/30: Status = $NEW_STATUS"
              
              if [ "$NEW_STATUS" != "pending-install" ] && [ "$NEW_STATUS" != "pending-upgrade" ] && [ "$NEW_STATUS" != "pending-rollback" ]; then
                echo "‚úÖ Previous operation completed. Proceeding with deployment."
                break
              fi
              
              if [ $i -eq 30 ]; then
                echo "‚ùå Timeout: Helm operation still pending after 5 minutes"
                exit 1
              fi
            done
          else
            echo "‚úÖ No pending Helm operations. Safe to proceed."
          fi

      - name: Create Kubernetes namespace if not exists
        run: kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Docker registry secret
        run: |
          kubectl create secret docker-registry registry-cs464-project \
            --docker-server=${{ secrets.REGISTRY_NAME }} \
            --docker-username=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            --docker-password=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            --namespace=${{ env.K8S_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create secrets override file
        run: |
          cat <<EOF > secrets.yaml
          image:
            repository: ${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}
            tag: "${{ github.sha }}"
          
          postgresql:
            auth:
              password: "${{ secrets.POSTGRESQL_PASSWORD }}"
          
          env:
            PGPASSWORD: "${{ secrets.POSTGRESQL_PASSWORD }}"
            RABBITMQ_USERNAME: "${{ secrets.RABBITMQ_USERNAME }}"
            RABBITMQ_PASSWORD: "${{ secrets.RABBITMQ_PASSWORD }}"
          EOF

      - name: Build Helm dependencies
        run: |
          cd helm
          helm dependency build
          cd ..

      - name: Deploy with Helm
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ./helm \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --values ./helm/values.yaml \
            --values secrets.yaml \
            --set global.compatibility.openshift.adaptSecurityContext=disabled \
            --set global.security.allowInsecureImages=true \
            --set podAnnotations."app\.kubernetes\.io/deploy-time"="$(date +%s)" \
            --force \
            --wait \
            --timeout 5m \
            --create-namespace

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.HELM_RELEASE_NAME }} -n ${{ env.K8S_NAMESPACE }}
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app.kubernetes.io/name=user-service

      - name: Get LoadBalancer IP
        id: get-ip
        run: |
          echo "Waiting for LoadBalancer IP..."
          for i in {1..30}; do
            INGRESS_IP=$(kubectl get svc -n ingress-nginx nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -n "$INGRESS_IP" ]; then
              echo "LoadBalancer IP: $INGRESS_IP"
              echo "ip=$INGRESS_IP" >> $GITHUB_OUTPUT
              break
            fi
            echo "Attempt $i/30: Waiting for IP..."
            sleep 10
          done
          
          if [ -z "$INGRESS_IP" ]; then
            echo "Warning: Could not get LoadBalancer IP"
            echo "ip=pending" >> $GITHUB_OUTPUT
          fi

      - name: Update Cloudflare DNS
        if: steps.get-ip.outputs.ip != 'pending'
        run: |
          ZONE_ID="${{ secrets.CLOUDFLARE_ZONE_ID }}"
          API_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}"
          DOMAIN="user.linyucong.com"
          IP="${{ steps.get-ip.outputs.ip }}"
          
          echo "Updating DNS for $DOMAIN to point to $IP"
          
          # Get DNS record ID
          RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?type=A&name=$DOMAIN" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" | jq -r '.result[0].id')
          
          if [ "$RECORD_ID" == "null" ] || [ -z "$RECORD_ID" ]; then
            # Create new DNS record
            echo "Creating new DNS record..."
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
              -H "Authorization: Bearer $API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{\"type\":\"A\",\"name\":\"$DOMAIN\",\"content\":\"$IP\",\"ttl\":120,\"proxied\":false}"
          else
            # Update existing DNS record
            echo "Updating existing DNS record (ID: $RECORD_ID)..."
            curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
              -H "Authorization: Bearer $API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{\"type\":\"A\",\"name\":\"$DOMAIN\",\"content\":\"$IP\",\"ttl\":120,\"proxied\":false}"
          fi
          
          echo "DNS update completed for $DOMAIN ‚Üí $IP"

      - name: Display deployment summary
        run: |
          echo "### üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: \`${{ secrets.REGISTRY_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Image: \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Kubernetes Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Cluster: \`${{ secrets.K8S_CLUSTER_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Namespace: \`${{ env.K8S_NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Release: \`${{ env.HELM_RELEASE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- LoadBalancer IP: \`${{ steps.get-ip.outputs.ip }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**DNS:**" >> $GITHUB_STEP_SUMMARY
          echo "- Domain: \`user.linyucong.com\`" >> $GITHUB_STEP_SUMMARY
          echo "- Points to: \`${{ steps.get-ip.outputs.ip }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Status: DNS automatically updated ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:**" >> $GITHUB_STEP_SUMMARY
          echo "- SHA: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Message: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pods Status:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app.kubernetes.io/name=user-service >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üåê Service URL:**" >> $GITHUB_STEP_SUMMARY
          echo "https://user.linyucong.com" >> $GITHUB_STEP_SUMMARY
